<?xml version="1.0" encoding="UTF-8"?>
<!--W3C Schema generated by XMLSPY v5 rel. 3 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="applicationTest">
    <xs:annotation>
      <xs:documentation>[root element]</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="test" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>container for one test in a set of application tests</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:all>
              <xs:element ref="commandLine"/>
              <xs:element ref="standardOut" minOccurs="0"/>
              <xs:element ref="labels" minOccurs="0"/>
              <xs:element ref="cubes" minOccurs="0"/>
              <xs:element ref="binaries" minOccurs="0"/>
              <xs:element ref="text" minOccurs="0"/>
            </xs:all>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="program" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="temp" type="xs:string">
    <xs:annotation>
      <xs:documentation>filename for temp file produced by application</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="truth">
    <xs:annotation>
      <xs:documentation>the name of the truth file the output will be tested against. Truth files are assumed to be in the AppTest directory.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element ref="temp" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="against">
    <xs:annotation>
      <xs:documentation>filename of output label to test. File is assumed to be in the TestTmp directory.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element ref="temp" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="commandLine">
    <xs:annotation>
      <xs:documentation>parameters for this application necessary to produce the test results</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:element ref="preprocess" minOccurs="0"/>
        <xs:element ref="temp" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="postprocess" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="standardOut">
    <xs:annotation>
      <xs:documentation>if this element exists, standard output will be tested against the truth file named in the truth element</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="preprocess" minOccurs="0"/>
        <xs:element ref="truth"/>
        <xs:element ref="postprocess" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="labels">
    <xs:annotation>
      <xs:documentation>container of cube label files to be tested</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="compareLabel" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>one label to be tested</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:all>
              <xs:element ref="preprocess" minOccurs="0"/>
              <xs:element ref="against"/>
              <xs:element ref="truth"/>
              <xs:element name="groups">
                <xs:annotation>
                  <xs:documentation>container of groups in a PVL formatted file to test</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="compareGroup" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>one group in a PVL formatted file to test</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="key" maxOccurs="unbounded">
                            <xs:annotation>
                              <xs:documentation>name of key to test (define name attribute, element is empty)</xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                              <xs:attribute name="name" type="xs:string" use="required"/>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute name="name" type="xs:string" use="required"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element ref="postprocess" minOccurs="0"/>
            </xs:all>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="cubes">
    <xs:annotation>
      <xs:documentation>container of cubes to be tested</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="compareCube" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>one output cube to be tested</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:all>
              <xs:element ref="preprocess" minOccurs="0"/>
              <xs:element ref="truth"/>
              <xs:element ref="against"/>
              <xs:element ref="postprocess" minOccurs="0"/>
            </xs:all>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="binaries">
    <xs:annotation>
      <xs:documentation>Container of non-cube binary files to be tested</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="compareBinary" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>one non-cube binary file to be tested</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:all>
              <xs:element ref="preprocess" minOccurs="0"/>
              <xs:element ref="truth"/>
              <xs:element ref="against"/>
              <xs:element ref="postprocess" minOccurs="0"/>
            </xs:all>
            <xs:attribute name="skip" type="xs:integer" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="text">
    <xs:annotation>
      <xs:documentation>Container of text/ASCII files to be tested</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="compareText" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>one text/ASCII file to be tested</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:all>
              <xs:element ref="preprocess" minOccurs="0"/>
              <xs:element ref="truth"/>
              <xs:element ref="against"/>
              <xs:element ref="postprocess" minOccurs="0"/>
            </xs:all>
            <xs:attribute name="skip" type="xs:integer" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="preprocess"/>
  <xs:element name="postprocess"/>
</xs:schema>
