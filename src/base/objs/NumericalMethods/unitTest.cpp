#include <iostream>
#include <cstdlib>
#include "NumericalMethods.h"
#include "iException.h"
#include "Preference.h"

using namespace Isis;

int main () {
  Isis::Preference::Preferences(true);

  std::cout << "UNIT TEST for Numerical Methods" << 
      std::endl << std::endl;

  std::cout << "Test r8polint ..." << std::endl;
  try {
  int n = 5;
  double xa[5] = {1.0,.25,.0625,.015625,.00390625};
  double ya[5] = {.0793744915,.0713448204,.069728113,
      .0693391384,.0692283313};
  double x = 0.;
  double y;
  double dy;
 
  NumericalMethods::r8polint(xa,ya,n,x,&y,&dy);
  std::cout << "Results from r8polint = " << y << "," << dy <<   
      std::endl << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 5;
  double xa[5] = {1.0,.25,.0625,.015625,.00390625};
  double ya[5] = {12.4541606,12.4541606,12.4541606,
      12.4541606,12.4541606};
  double x = 0.;
  double y;
  double dy;
 
  NumericalMethods::r8polint(xa,ya,n,x,&y,&dy);
  std::cout << "Results from r8polint = " << y << "," << dy <<   
      std::endl << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 5;
  double xa[5] = {1.0,.25,.0625,.015625,.00390625};
  double ya[5] = {195.991361,84.5446212,42.5943957,
      34.9495393,34.7003692};
  double x = 0.;
  double y;
  double dy;
 
  NumericalMethods::r8polint(xa,ya,n,x,&y,&dy);
  std::cout << "Results from r8polint = " << y << "," << dy <<   
      std::endl << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 5;
  double xa[5] = {.25,.0625,.015625,.00390625,.0009765625};
  double ya[5] = {262.717116,160.89322,142.611298,
      142.05761,142.057118};
  double x = 0.;
  double y;
  double dy;
 
  NumericalMethods::r8polint(xa,ya,n,x,&y,&dy);
  std::cout << "Results from r8polint = " << y << "," << dy <<   
      std::endl << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test r8spline ..." << std::endl;
  try {
  int n = 91;
  double y2[91];
  double yp1 = 1.0e+30;
  double ypn = 1.0e+30;
  double x[91];
  double y[91] = {.138379562,.138384021,.138397402,.138419716,
      .13845098,.138491236,.138540615,.138599446,.138668276,
      .138747805,.138838749,.138941745,.139057286,.139185703,
      .139327176,.139481742,.139649278,.139829416,.140021376,
      .140223748,.140434293,.140650322,.140868006,.141082561,
      .141288971,.141482091,.141656948,.141808992,.141934288,
      .142029846,.142097889,.142132875,.142133959,.14210097,
      .142034336,.141934992,.141814665,.141686296,.141532415,
      .141354981,.14115608,.14093788,.140712163,.140478584,
      .14023274,.139976733,.139712619,.139458779,.139222237,
      .138983276,.138743601,.138504868,.138276019,.13805441,
      .137838061,.137628425,.137432228,.1372623,.137101425,
      .136950912,.136812083,.136690713,.13658256,.13648898,
      .136411382,.136348071,.136299798,.136268082,.136254325,
      .136253785,.136273022,.136313941,.136371062,.136421211,
      .136492271,.13658654,.136694574,.136814877,.136962805,
      .137142373,.137283976,.137433162,.137610235,.137813204,
      .138016204,.138259223,.138558167,.138811505,.139006566,
      .139221127,0.};

  for (int i=0; i<n; i++)
    x[i] = i;

  NumericalMethods::r8spline(x,y,n,yp1,ypn,y2);
  std::cout << "Results from r8spline = " << std::endl;
  for (int i=0; i<n; i++)
    std::cout << y2[i] << std::endl;
  std::cout << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 91;
  double y2[91];
  double yp1 = 1.0e+30;
  double ypn = 1.0e+30;
  double x[91];
  double y[91] = {.0927881817,.0927897278,.0926800597,.0922811047,
      .0919355959,.0920153528,.0923699733,.0924425584,.0925300574,
      .0927414031,.0928034519,.0928777351,.0928562181,.0927911708,
      .092918509,.0930569697,.0932062062,.0933533244,.0935114563,
      .0936916215,.0938939957,.0940809661,.0943062421,.0944237223,
      .0945789035,.094821926,.0949008382,.0950870771,.0952766783,
      .0954294521,.0956298477,.0958375777,.096133349,.0963426266,
      .0965613826,.0967806746,.0969974793,.0972265398,.0974281704,
      .097628606,.0978490297,.0980259627,.0983025134,.0984127876,
      .0984969151,.0985602914,.0985962326,.0986019244,.0985743119,
      .0985016384,.0981902076,.0980329773,.0978280304,.0975764347,
      .097256073,.096864496,.0964031837,.0958609893,.095228211,
      .094495328,.0936542935,.0926872479,.0915887655,.0903436076,
      .0889356227,.0873556693,.0855804611,.083588777,.081371054,
      .078900711,.0761522467,.0730999543,.0697142077,.0659646185,
      .0618140183,.0572282749,.0521709125,.0465849066,.0404318575,
      .0336588931,.0262179915,.0180640263,.00917859444,-.000461521851,
      -.0107416135,-.0215460025,-.0325029338,-.0430034173,-.0522680432,
      -.0598731005,-.0660966892};

  for (int i=0; i<n; i++)
    x[i] = i;

  NumericalMethods::r8spline(x,y,n,yp1,ypn,y2);
  std::cout << "Results from r8spline = " << std::endl;
  for (int i=0; i<n; i++)
    std::cout << y2[i] << std::endl;
  std::cout << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test r8splint ..." << std::endl;
  try {
  int n = 91;
  double xa[91];
  double ya[91] = {.138379562,.138384021,.138397402,.138419716,
      .13845098,.138491236,.138540615,.138599446,.138668276,
      .138747805,.138838749,.138941745,.139057286,.139185703,
      .139327176,.139481742,.139649278,.139829416,.140021376,
      .140223748,.140434293,.140650322,.140868006,.141082561,
      .141288971,.141482091,.141656948,.141808992,.141934288,
      .142029846,.142097889,.142132875,.142133959,.14210097,
      .142034336,.141934992,.141814665,.141686296,.141532415,
      .141354981,.14115608,.14093788,.140712163,.140478584,
      .14023274,.139976733,.139712619,.139458779,.139222237,
      .138983276,.138743601,.138504868,.138276019,.13805441,
      .137838061,.137628425,.137432228,.1372623,.137101425,
      .136950912,.136812083,.136690713,.13658256,.13648898,
      .136411382,.136348071,.136299798,.136268082,.136254325,
      .136253785,.136273022,.136313941,.136371062,.136421211,
      .136492271,.13658654,.136694574,.136814877,.136962805,
      .137142373,.137283976,.137433162,.137610235,.137813204,
      .138016204,.138259223,.138558167,.138811505,.139006566,
      .139221127,0.};
  double y2a[91] = {0.,1.13101843E-05,8.29099213E-06,9.12012181E-06,
      8.93187632E-06,9.10157733E-06,9.40630989E-06,9.97591584E-06,
      1.06940623E-05,1.14314021E-05,1.2076881E-05,1.25722097E-05,
      1.29022276E-05,1.30784935E-05,1.31180335E-05,1.30076244E-05,
      1.26717491E-05,1.19163507E-05,1.05936466E-05,8.18094971E-06,
      5.72253591E-06,1.83309272E-06,-3.12591546E-06,-8.10284831E-06,
      -1.33333783E-05,-1.83004688E-05,-2.30473361E-05,-2.63894911E-05,
      -3.1876654E-05,-2.45327663E-05,-3.50851658E-05,-3.34670065E-05,
      -3.44644538E-05,-3.31077301E-05,-3.49749179E-05,-2.32532072E-05,
      2.0907028E-06,-3.33608059E-05,-2.17181599E-05,-2.1088567E-05,
      -2.27284715E-05,-3.79047712E-06,-7.21602484E-06,-1.45115635E-05,
      -8.32751656E-06,-1.31596545E-05,1.23249614E-05,2.55050455E-05,
      -1.05613492E-05,2.22765152E-06,-2.62839903E-06,1.39330448E-05,
      6.20225366E-06,4.69705469E-06,6.56798355E-06,9.31617696E-06,
      3.67943759E-05,1.12335496E-06,1.30257559E-05,8.9525553E-06,
      2.12588201E-05,1.07748757E-05,1.4942736E-05,1.68884463E-05,
      1.33967478E-05,1.52465428E-05,1.58458958E-05,2.07073499E-05,
      9.08833215E-06,2.22351494E-05,2.06335237E-05,2.53177195E-05,
      -2.46828391E-05,3.15774985E-05,2.38337157E-05,1.23480444E-05,
      9.36559528E-06,2.37984902E-05,6.11920879E-05,-7.87283966E-05,
      2.59342294E-05,2.04917306E-05,5.94164736E-05,-.000102779135,
      .000351883416,-.00106463847,.00424221762,-.0161778629,
      .0601195699,-.224183422,0.};
  double x = 0.;
  double y;

  for (int i=0; i<n; i++)
    xa[i] = i;

  NumericalMethods::r8splint(xa,ya,y2a,n,x,&y);
  std::cout << "Results from r8splint = " << y << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 91;
  double xa[91];
  double ya[91] = {.138379562,.138384021,.138397402,.138419716,
      .13845098,.138491236,.138540615,.138599446,.138668276,
      .138747805,.138838749,.138941745,.139057286,.139185703,
      .139327176,.139481742,.139649278,.139829416,.140021376,
      .140223748,.140434293,.140650322,.140868006,.141082561,
      .141288971,.141482091,.141656948,.141808992,.141934288,
      .142029846,.142097889,.142132875,.142133959,.14210097,
      .142034336,.141934992,.141814665,.141686296,.141532415,
      .141354981,.14115608,.14093788,.140712163,.140478584,
      .14023274,.139976733,.139712619,.139458779,.139222237,
      .138983276,.138743601,.138504868,.138276019,.13805441,
      .137838061,.137628425,.137432228,.1372623,.137101425,
      .136950912,.136812083,.136690713,.13658256,.13648898,
      .136411382,.136348071,.136299798,.136268082,.136254325,
      .136253785,.136273022,.136313941,.136371062,.136421211,
      .136492271,.13658654,.136694574,.136814877,.136962805,
      .137142373,.137283976,.137433162,.137610235,.137813204,
      .138016204,.138259223,.138558167,.138811505,.139006566,
      .139221127,0.};
  double y2a[91] = {0.,1.13101843E-05,8.29099213E-06,9.12012181E-06,
      8.93187632E-06,9.10157733E-06,9.40630989E-06,9.97591584E-06,
      1.06940623E-05,1.14314021E-05,1.2076881E-05,1.25722097E-05,
      1.29022276E-05,1.30784935E-05,1.31180335E-05,1.30076244E-05,
      1.26717491E-05,1.19163507E-05,1.05936466E-05,8.18094971E-06,
      5.72253591E-06,1.83309272E-06,-3.12591546E-06,-8.10284831E-06,
      -1.33333783E-05,-1.83004688E-05,-2.30473361E-05,-2.63894911E-05,
      -3.1876654E-05,-2.45327663E-05,-3.50851658E-05,-3.34670065E-05,
      -3.44644538E-05,-3.31077301E-05,-3.49749179E-05,-2.32532072E-05,
      2.0907028E-06,-3.33608059E-05,-2.17181599E-05,-2.1088567E-05,
      -2.27284715E-05,-3.79047712E-06,-7.21602484E-06,-1.45115635E-05,
      -8.32751656E-06,-1.31596545E-05,1.23249614E-05,2.55050455E-05,
      -1.05613492E-05,2.22765152E-06,-2.62839903E-06,1.39330448E-05,
      6.20225366E-06,4.69705469E-06,6.56798355E-06,9.31617696E-06,
      3.67943759E-05,1.12335496E-06,1.30257559E-05,8.9525553E-06,
      2.12588201E-05,1.07748757E-05,1.4942736E-05,1.68884463E-05,
      1.33967478E-05,1.52465428E-05,1.58458958E-05,2.07073499E-05,
      9.08833215E-06,2.22351494E-05,2.06335237E-05,2.53177195E-05,
      -2.46828391E-05,3.15774985E-05,2.38337157E-05,1.23480444E-05,
      9.36559528E-06,2.37984902E-05,6.11920879E-05,-7.87283966E-05,
      2.59342294E-05,2.04917306E-05,5.94164736E-05,-.000102779135,
      .000351883416,-.00106463847,.00424221762,-.0161778629,
      .0601195699,-.224183422,0.};
  double x = 51.7002388;
  double y;

  for (int i=0; i<n; i++)
    xa[i] = i;

  NumericalMethods::r8splint(xa,ya,y2a,n,x,&y);
  std::cout << "Results from r8splint = " << y << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test r8expint ..." << std::endl;
  try {
  int n = 1;
  double x = .28;
  double result;

  result = NumericalMethods::r8expint(n,x);
  std::cout << "Results from r8expint = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  int n = 1;
  double x = .733615937;
  double result;

  result = NumericalMethods::r8expint(n,x);
  std::cout << "Results from r8expint = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test r8ei ..." << std::endl;
  try {
  double x = .234;
  double result;

  result = NumericalMethods::r8ei(x);
  std::cout << "Results from r8ei = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  double x = 1.5;
  double result;

  result = NumericalMethods::r8ei(x);
  std::cout << "Results from r8ei = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  double x = 2.6;
  double result;

  result = NumericalMethods::r8ei(x);
  std::cout << "Results from r8ei = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  double x = .01583;
  double result;

  result = NumericalMethods::r8ei(x);
  std::cout << "Results from r8ei = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test G11Prime ..." << std::endl;
  try {
  double tau = .28;
  double result;

  result = NumericalMethods::G11Prime(tau);
  std::cout << "Results from G11Prime = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  try {
  double tau = 1.5836;
  double result;

  result = NumericalMethods::G11Prime(tau);
  std::cout << "Results from G11Prime = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  std::cout << "Test PhtAcos ..." << std::endl;
  try {
  double result;

  result = NumericalMethods::PhtAcos(1.0);
  std::cout << "Results from PhtAcos = " << result << std::endl
      << std::endl;
  result = NumericalMethods::PhtAcos(.999999939);
  std::cout << "Results from PhtAcos = " << result << std::endl
      << std::endl;
  result = NumericalMethods::PhtAcos(-.861393443);
  std::cout << "Results from PhtAcos = " << result << std::endl
      << std::endl;
  }
  catch (iException &e) {
    e.Report();
  }

  return 0;
}
